Search.setIndex({"docnames": ["algorithmChoice", "bioco", "bioconsert", "borda", "consensus", "copeland", "dataset", "element", "exactalgorithm", "exactalgorithmbase", "exactalgorithmcplex", "exactalgorithmcplexforpaperoptim1", "exactalgorithmgeneric", "index", "kemeny_score_computation", "kwiksortabs", "kwiksortrandom", "median_ranking", "orderedPartition", "pairwisebasedalgorithm", "parcons", "parconsPartition", "parfront", "pickaperm", "ranking", "scoringscheme", "utils"], "filenames": ["algorithmChoice.rst", "bioco.rst", "bioconsert.rst", "borda.rst", "consensus.rst", "copeland.rst", "dataset.rst", "element.rst", "exactalgorithm.rst", "exactalgorithmbase.rst", "exactalgorithmcplex.rst", "exactalgorithmcplexforpaperoptim1.rst", "exactalgorithmgeneric.rst", "index.rst", "kemeny_score_computation.rst", "kwiksortabs.rst", "kwiksortrandom.rst", "median_ranking.rst", "orderedPartition.rst", "pairwisebasedalgorithm.rst", "parcons.rst", "parconsPartition.rst", "parfront.rst", "pickaperm.rst", "ranking.rst", "scoringscheme.rst", "utils.rst"], "titles": ["algorithmChoice", "bioco", "bioconsert", "borda", "consensus", "copeland", "dataset", "element", "exactalgorithm", "exactalgorithmbase", "exactalgorithmcplex", "exactalgorithmcplexforpaperoptim1", "exactalgorithmgeneric", "Welcome to CoRankCo\u2019s documentation!", "kemeny_score_computation", "kwiksortabs", "kwiksortrandom", "median_ranking", "orderedPartition", "pairwisebasedalgorithm", "parcons", "parconsPartition", "parfront", "pickaperm", "ranking", "scoringscheme", "utils"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "corankco": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "algorithm": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23], "valu": [0, 4, 6, 7, 20, 25], "enum": 0, "repres": [0, 4, 6, 7, 10, 24, 25], "avail": [0, 4, 6, 8, 10], "rank": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26], "static": [0, 6, 19, 21, 22, 24, 25], "get_al": 0, "list": [0, 4, 6, 8, 10, 12, 18, 21, 22, 23, 24, 25, 26], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "all": [0, 2, 4, 6, 8, 9, 10, 12, 14, 18, 19, 22, 23, 24], "A": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 19, 20, 21, 22, 23, 24, 25], "type": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, 23, 24, 25], "get_all_compatible_with_any_scoring_schem": 0, "ar": [0, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 23, 24, 25], "compat": [0, 2, 20], "ani": [0, 4, 5, 8, 10, 12, 14, 15, 16, 19, 22, 23], "score": [0, 2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 23, 25], "scheme": [0, 2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 23, 25], "The": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "have": [0, 6, 18, 19, 20, 24, 25], "implement": [0, 2, 3, 5, 8, 9, 10, 12, 15, 16, 17, 18, 20, 23], "can": [0, 3, 4, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26], "handl": [0, 3, 5, 8, 10, 12, 14, 15, 16], "algorithmenumer": [0, 13], "contain": [0, 4, 6, 8, 9, 10, 12, 18, 19, 21, 22, 23, 24], "get_algorithm": [0, 13], "alg": 0, "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "dict": [0, 4, 6, 24], "none": [0, 2, 4, 6, 20], "medianrank": [0, 2, 13, 17, 20], "an": [0, 3, 5, 7, 8, 9, 17, 18, 20, 21, 22, 23, 24], "instanc": [0, 1, 3, 4, 6, 7, 20, 24, 25], "specifi": 0, "instanti": 0, "must": [0, 6, 9, 10, 15, 25], "option": [0, 6], "pass": 0, "": [0, 1, 5, 10, 14, 20, 22, 23], "constructor": 0, "If": [0, 2, 3, 4, 5, 8, 9, 10, 12, 15, 17, 19, 20, 23, 25], "empti": [0, 6], "us": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24], "rais": [0, 2, 3, 5, 8, 10, 12, 15, 17, 20, 23, 25], "typeerror": 0, "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "bioconsert": [1, 13], "borda": [1, 13], "start": [1, 2], "point": [1, 10], "improv": 1, "its": [1, 3, 18], "consensu": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25], "local": 1, "search": [1, 13], "heurist": [1, 2, 15, 20], "kemeni": [1, 2, 4, 6, 7, 14, 15, 18, 20, 21, 22, 23], "young": [1, 2, 15, 20, 23], "aggreg": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23], "publish": [1, 2, 5, 20, 21, 22], "cohen": [1, 2, 10, 14, 20, 22, 23, 25], "boulakia": [1, 2, 10, 14, 20, 22, 23, 25], "denis": [1, 2, 10, 14, 20, 22, 23, 25], "hamel": [1, 2], "median": [1, 2], "gener": [1, 2, 6, 14, 19, 20, 22, 23, 24], "biolog": [1, 2, 8, 20, 22, 25], "data": [1, 2, 25], "6809": [1, 2], "73": [1, 2], "90": [1, 2], "10": [1, 2, 10, 14, 23, 25], "1007": [1, 2, 25], "978": [1, 2, 25], "3": [1, 2, 3, 4, 25], "642": [1, 2], "22351": [1, 2], "8_5": [1, 2], "2011": [1, 2], "complex": [1, 2, 5, 6, 8, 15, 20], "o": [1, 2, 4, 5, 6, 15, 20], "nb_elements\u00b2": [1, 2, 5, 6, 15, 20], "thi": [1, 2, 3, 5, 6, 8, 9, 10, 11, 17, 19, 20, 21, 22, 23, 24], "which": [1, 4, 6, 8, 10, 21, 23, 24], "method": [1, 3, 5, 6, 9, 15, 17, 18, 19, 23, 24], "see": [1, 3, 4, 6, 16, 21, 22, 23], "detail": [1, 6, 25], "docstr": [1, 19, 21, 23], "For": [1, 2, 3, 4, 8, 24, 25], "time": [1, 2, 17], "comput": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 15, 17, 19, 20, 21, 22, 23], "reason": [1, 2, 5, 8], "part": [1, 2, 18], "written": [1, 2], "c": [1, 2, 3, 25], "get_full_nam": [1, 2, 3, 5, 8, 9, 10, 11, 12, 15, 16, 17, 20, 23], "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 23, 24, 25, 26], "bordacount": [1, 3, 13], "starter": 1, "starting_algorithm": 2, "collect": 2, "sarah": [2, 25], "alain": [2, 25], "sylvi": 2, "nb_rank": [2, 4, 5, 6, 15, 20, 24], "empir": 2, "result": [2, 6], "prove": 2, "had": 2, "best": 2, "qualiti": [2, 14], "benchmark": [2, 3, 5, 15, 17, 20], "complet": [2, 4, 6, 8, 23, 24, 25], "brancott": [2, 20, 22, 25], "et": [2, 5, 11, 25], "al": [2, 5, 11, 25], "2015": 2, "ti": [2, 3, 5, 6, 11, 14, 15, 19, 23, 24, 25, 26], "experi": [2, 11], "analysi": 2, "compute_consensus_rank": [2, 3, 5, 8, 9, 10, 12, 15, 17, 20, 23], "dataset": [2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 17, 20, 21, 22, 23], "scoring_schem": [2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 15, 16, 17, 20, 21, 22, 23], "scoringschem": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23], "return_at_most_one_rank": [2, 3, 5, 8, 9, 10, 12, 15, 17, 20, 23], "fals": [2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 17, 19, 20, 23, 24, 25], "bench_mod": [2, 3, 5, 8, 9, 10, 12, 15, 17, 20, 23], "calcul": [2, 3, 5, 15, 17, 20], "base": [2, 3, 5, 6, 9, 11, 15, 17, 19, 20], "given": [2, 3, 4, 5, 6, 14, 15, 17, 18, 19, 20, 24, 25], "bool": [2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 23, 24, 25], "true": [2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25], "should": [2, 3, 5, 6, 8, 9, 10, 12, 14, 15, 17, 20, 23], "most": [2, 3, 5, 15, 17, 20], "one": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25], "mai": [2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 17, 20, 23, 24], "addit": [2, 3, 5, 15, 17, 20], "inform": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 20, 23], "purpos": [2, 3, 5, 15, 17, 20], "unabl": [2, 3, 5, 15, 17, 20], "provid": [2, 3, 5, 6, 8, 10, 12, 15, 17, 20, 23], "multipl": [2, 3, 5, 8, 10, 12, 15, 17, 20, 23], "consensus": [2, 3, 5, 15, 17, 20], "singl": [2, 3, 5, 15, 17, 20], "rtype": [2, 4, 5, 6, 7, 17, 20, 25], "scoringschemenothandledexcept": [2, 3, 5, 8, 10, 12, 13, 15, 17, 20, 23], "when": [2, 3, 5, 8, 9, 10, 12, 15, 16, 17, 20, 23], "cannot": [2, 3, 5, 8, 10, 12, 15, 17, 20, 23], "becaus": [2, 3, 5, 8, 10, 12, 15, 17, 20, 23], "doe": [2, 3, 5, 8, 10, 12, 15, 17, 20, 23, 24], "support": [2, 3, 5, 15, 17, 20], "name": [2, 3, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 20, 23], "e": [2, 4, 20, 25], "departur": 2, "is_scoring_scheme_relevant_when_incomplete_rank": [2, 3, 5, 8, 9, 10, 12, 15, 16, 17, 20, 23], "check": [2, 3, 5, 6, 8, 9, 10, 12, 15, 16, 19, 20, 23, 25], "relev": [2, 3, 5, 8, 9, 10, 12, 15, 16, 17, 20, 23], "incomplet": [2, 3, 5, 8, 9, 10, 12, 14, 15, 16, 17, 20, 23, 24], "iif": [2, 6, 18, 20, 24], "use_bucket_id": 3, "defin": [3, 4, 11, 14, 15, 17, 19, 21, 23, 24, 25], "j": [3, 6, 18, 19, 22], "de": 3, "m\u00e9moir": 3, "sur": 3, "le": 3, "\u00e9lection": 3, "au": 3, "scrutin": 3, "histoir": 3, "l": [3, 6, 20, 21, 22], "acad\u00e9mi": 3, "royal": 3, "scienc": [3, 5], "pari": 3, "franc": 3, "1781": 3, "ch": 3, "1": [3, 4, 5, 6, 15, 17, 18, 19, 24, 25, 26], "pp": [3, 20, 22], "657": 3, "664": 3, "It": [3, 8, 17, 22, 23], "famou": [3, 5], "vote": 3, "system": [3, 5, 19, 20, 22], "exampl": [3, 4, 26], "elect": 3, "ballon": 3, "d": [3, 6], "ha": [3, 4, 8, 20, 23, 24], "been": [3, 4, 6, 8, 20, 23, 24], "slightli": 3, "adapt": [3, 5], "element": [3, 4, 6, 8, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26], "id": [3, 6, 18, 19], "bucket": [3, 6, 23, 24], "user": [3, 10, 23], "select": [3, 8, 23, 24], "prefer": 3, "boolean": 3, "default": [3, 8, 24], "5": [3, 5, 23, 25], "4": [3, 25], "2": [3, 4, 19, 23, 25, 26], "wherea": [3, 25], "non": [3, 6, 19, 24, 25], "depend": [3, 8], "two": [3, 4, 7, 18, 25], "them": [3, 19], "allow": 3, "accord": [3, 4, 6, 14, 19, 24, 25], "consid": [3, 4, 8, 9, 10, 11, 12, 14, 18, 21, 22, 23, 25], "last": [3, 25], "mean": [3, 15, 23], "thei": 3, "full": [3, 5, 9, 10, 11, 12, 15, 16, 17, 23], "string": [3, 5, 7, 9, 10, 11, 12, 16, 17, 23, 24, 25], "equival": [3, 4, 8, 10, 12, 14, 23, 24, 25], "follow": [3, 11, 21, 22, 25], "induc": 3, "measur": 3, "unifi": [3, 6, 10, 14, 23], "p": [3, 10, 14, 20, 22, 23, 25], "0": [3, 5, 6, 15, 17, 19, 24, 25, 26], "otherwis": [3, 6, 9, 17, 19, 23, 25], "consensus_rank": 4, "att": 4, "consensusfeatur": [4, 13], "object": [4, 6, 11, 14, 18, 21, 22, 25], "input": [4, 6, 8, 23, 24, 25], "associ": [4, 6, 20], "also": [4, 17], "store": [4, 6], "final": [4, 24], "sever": [4, 8, 10, 12, 14, 17, 18, 19, 23], "featur": 4, "from": [4, 6, 10, 24], "enumer": 4, "properti": [4, 6, 7, 14, 18, 24, 25], "associated_dataset": 4, "creat": [4, 6, 25], "dure": [4, 6], "process": [4, 25], "associated_scoring_schem": 4, "copeland_scor": 4, "float": [4, 6, 7, 10, 14, 17, 25], "copeland": [4, 13], "univers": [4, 5, 6, 24], "dictionari": [4, 6], "whose": [4, 6], "kei": [4, 24], "copelandmethod": [4, 5, 13], "more": [4, 6, 8, 9, 10, 11, 12, 23, 25], "copeland_victori": 4, "int": [4, 6, 7, 18, 19, 20, 21, 24, 26], "number": [4, 6, 18, 24], "victori": [4, 5], "defeat": 4, "equal": [4, 5, 25], "each": [4, 6, 17, 18, 20, 24, 25], "integ": [4, 7, 24], "descript": [4, 6, 24, 25], "textual": 4, "includ": [4, 6, 17], "set": [4, 6, 8, 15, 18, 19, 21, 22, 24, 26], "evaluate_topk_rank": 4, "goldstandard": 4, "iter": 4, "top_k": 4, "20": 4, "k": [4, 19], "first": [4, 8, 10, 12, 14, 18, 23, 25], "tupl": [4, 19], "both": [4, 5, 25], "top": 4, "precis": [4, 10, 25], "second": [4, 8, 25], "vari": 4, "classmethod": [4, 6, 24], "from_raw_list": [4, 6], "construct": [4, 24], "union": [4, 6, 7, 24], "param": [4, 6, 18, 21, 24, 25], "raw": [4, 6], "either": [4, 7], "get_consensus_from_fil": 4, "path": [4, 6, 24], "file": [4, 6, 24], "kemeny_scor": 4, "regard": [4, 6], "between": [4, 8], "note": [4, 6, 10, 14, 18, 20, 24], "we": 4, "nb_element": [4, 6, 15, 18, 24], "log": 4, "save": 4, "after": [4, 7, 15, 19], "call": 4, "function": [4, 5, 11, 19, 26], "nb_consensu": 4, "than": [4, 6, 8, 9, 10, 12, 19, 23, 24], "same": [4, 6, 18], "appear": [4, 6, 18], "necessarily_optim": 4, "know": 4, "necessarili": [4, 20], "optim": [4, 8, 9, 10, 11, 20, 21, 22], "might": 4, "possibl": [4, 11], "who": 4, "wa": [4, 11], "access": 4, "whatev": 4, "isnecessarilyoptim": 4, "consensussinglerank": [4, 5, 13, 15], "onli": [4, 6, 8, 10, 11, 12, 14, 18, 23], "remain": 4, "position_el": 4, "posit": [4, 6, 19, 24, 25], "target": [4, 6, 18], "elector": 5, "h": 5, "social": 5, "welfar": 5, "seminar": 5, "applic": 5, "mathemat": 5, "michigan": 5, "1951": 5, "easili": 5, "framework": [5, 14, 23], "andrieu": [5, 10, 11, 14, 20, 22, 23, 25], "2023": [5, 11], "x": [5, 7, 18, 22, 25], "against": 5, "y": [5, 7, 18, 22, 25], "becom": 5, "befor": [5, 7, 15, 18, 19, 22, 25], "contains_el": 6, "find": [6, 8, 10, 12, 15, 23], "least": [6, 11], "from_fil": [6, 24], "new": [6, 24], "get_dataset_from_fil": 6, "read": 6, "get_datasets_from_fold": 6, "path_fold": 6, "get": [6, 7, 9, 11, 17, 18, 20, 24, 25], "folder": 6, "get_posit": 6, "ndarrai": [6, 19], "numpi": [6, 19], "matrix": [6, 19], "where": [6, 19], "m": [6, 10, 14, 23], "denot": [6, 19], "get_random_dataset_markov": 6, "nb_elem": [6, 24], "step": [6, 24], "markov": [6, 24], "chain": [6, 24], "fewer": [6, 8], "initi": [6, 20, 23, 24], "want": 6, "remov": [6, 24], "walk": 6, "rankingsgener": 6, "get_uniform_permutation_dataset": 6, "without": [6, 11, 23, 24], "uniformli": [6, 24], "is_complet": 6, "domain": [6, 24], "mapping_elem_id": 6, "map": 6, "uniqu": [6, 24], "mapping_id_elem": 6, "total": [6, 17, 18], "penalties_relative_posit": 6, "pairwiseelementcomparison": [6, 7, 13], "pair": [6, 19], "cost": [6, 7, 19, 25], "differ": [6, 7], "rel": [6, 7, 19], "under": 6, "prism": [6, 7, 22], "elementcomparison": 6, "remove_el": 6, "elements_to_remov": 6, "remove_elements_rate_presence_lower_than": 6, "rate_pres": 6, "rate": 6, "presenc": 6, "lower": [6, 17], "threshold": [6, 10], "below": 6, "remove_empty_rank": 6, "sub_problem_from_el": 6, "elements_to_keep": 6, "sub": 6, "problem": [6, 10, 11, 20], "project": 6, "origin": 6, "similarli": 6, "within": [6, 7, 8, 14, 22, 23], "kept": 6, "sub_problem_from_id": 6, "id_elements_to_keep": 6, "unified_dataset": 6, "version": [6, 10, 19], "In": [6, 8, 10, 12, 23], "r": [6, 23, 25], "ad": [6, 24], "end": [6, 23], "current": [6, 24, 25], "unified_rank": 6, "without_ti": 6, "write": 6, "datasetselector": [6, 13], "nb_elem_min": 6, "nb_elem_max": 6, "inf": 6, "nb_rankings_min": 6, "nb_rankings_max": 6, "usabl": 6, "filter": 6, "attribut": [6, 20, 24], "maxim": 6, "retain": 6, "minim": [6, 19, 23], "select_dataset": 6, "list_dataset": 6, "refer": 6, "fit": [6, 8, 10, 12, 23], "self": 6, "except": [6, 9, 14, 17, 23, 25], "emptydatasetexcept": [6, 13], "custom": 6, "x_before_i": 7, "x_after_i": 7, "x_tied_i": 7, "encapsul": 7, "order": [7, 18, 21, 22], "place": [7, 19], "tie": 7, "exact": [8, 9, 10, 11, 12, 20, 21, 22], "wrapper": 8, "intellig": 8, "appropri": 8, "cplex": [8, 10, 11], "librari": [8, 12], "instal": [8, 10], "free": [8, 10, 12], "solver": 8, "exponenti": 8, "practic": 8, "case": 8, "expect": 8, "execut": 8, "few": 8, "task": 8, "involv": 8, "80": [8, 20], "larger": 8, "perform": [8, 10, 11], "significantli": 8, "influenc": 8, "specif": 8, "characterist": 8, "particularli": 8, "size": [8, 15, 20, 21, 24, 25], "largest": 8, "strongli": [8, 21], "connect": [8, 21], "compon": [8, 21], "describ": [8, 24], "research": 8, "paper": 8, "effici": [8, 10, 14, 20, 22, 23], "robust": [8, 19, 20, 22], "effect": [8, 20, 22], "massiv": [8, 20, 22], "http": [8, 10, 14, 21, 23], "www": [8, 10, 21], "researchg": [8, 21], "net": [8, 21], "public": [8, 21], "352277711_efficient_robust_and_effective_rank_aggregation_for_massive_biological_dataset": [8, 21], "exce": 8, "100": 8, "timefram": 8, "requir": 8, "excess": 8, "memori": 8, "determin": [8, 17], "parconspartit": [8, 13], "packag": [8, 10, 12, 21, 22, 23], "distanc": [8, 10, 12, 22, 23, 25], "penalti": [8, 9, 10, 12, 22, 23, 25], "vector": [8, 9, 10, 12, 22, 23, 25], "bench": [8, 9, 10, 12, 23], "mode": [8, 9, 10, 12, 23], "activ": [8, 9, 10, 12, 23], "underli": [8, 10, 12, 23], "abl": [8, 10, 12, 23], "made": [8, 10, 12, 23], "found": [8, 10, 11, 12, 23], "scenario": [8, 10, 12, 23], "pulp": [8, 12], "exactalgorithmcplex": [8, 12, 13], "abstract": [9, 16], "outlin": 9, "interfac": [9, 15, 17], "One": 9, "incompatibleargumentsexcept": [9, 13], "linear": [10, 11], "program": [10, 11], "couceiro": [10, 14, 23], "pierrot": [10, 14, 20, 22, 23], "model": [10, 14, 23], "suitabl": [10, 14, 23], "kind": [10, 14, 23], "dx": [10, 14, 23], "doi": [10, 14, 23], "org": [10, 14, 23], "2139": [10, 14, 23], "ssrn": [10, 14, 23], "4353494": [10, 14, 23], "proprietari": 10, "softwar": 10, "download": 10, "separ": 10, "ibm": 10, "websit": 10, "while": 10, "open": 10, "sourc": 10, "academ": 10, "com": 10, "product": 10, "ilog": 10, "studio": 10, "variabl": 10, "_precision_threshold": 10, "comparison": 10, "ilp": [10, 11, 12], "present": [11, 21], "ijar": [11, 25], "suffici": 11, "condit": 11, "ensur": 11, "re": 11, "person": 11, "contraint": 11, "articl": [11, 19, 21], "algotrithm": 12, "kemeny_score_comput": 13, "invalidrankingsforcomputingdist": [13, 14], "kemenycomputingfactori": [13, 14], "forbiddenassociationpenaltiesscoringschem": [13, 25], "invalidscoringschem": [13, 25], "nonrealpositivevaluesscoringschem": [13, 25], "util": 13, "parse_ranking_with_ti": [13, 26], "algorithmchoic": 13, "bioco": 13, "exactalgorithmbas": 13, "exactalgorithmcplexforpaperoptim1": 13, "exactalgorithmgener": 13, "exactalgorithm": 13, "kwiksortab": [13, 16], "kwiksortrandom": 13, "median_rank": 13, "pairwisebasedalgorithm": 13, "parcon": 13, "pickaperm": 13, "inompleterankingsincompatiblewithscoringschemeexcept": [13, 23], "orderedpartit": [13, 21, 22], "parfront": 13, "index": [13, 18], "modul": 13, "page": 13, "sc": 14, "get_kemeny_scor": 14, "kwiksort": [15, 16], "design": [15, 23], "quicksort": 15, "pick": [15, 23], "pivot": [15, 16], "shat": 15, "recurs": 15, "go": 15, "log2": 15, "choic": [15, 16], "worst": 15, "divid": [15, 18, 20], "group": [15, 18], "n": [15, 23, 24], "daughter": 15, "random": [16, 24], "uniform": [16, 24], "serv": 17, "whether": 17, "represent": [17, 24], "itself": 17, "bench_time_consensu": 17, "lower_bound_tim": 17, "averag": 17, "bound": 17, "deal": 17, "evalu": 17, "partit": [18, 21, 22], "useful": 18, "independ": 18, "consistent_with": 18, "compar": [18, 25], "subgroup": 18, "get_group_index": 18, "th": [18, 19], "in_same_group": 18, "element1": 18, "element2": 18, "sum": 18, "which_index_i": 18, "ith": 18, "gather": 19, "pairwis": 19, "code": 19, "factoris": 19, "can_be_all_ti": 19, "id_elements_to_check": 19, "cost_matrix": 19, "togeth": 19, "goe": 19, "through": 19, "ty": 19, "higher": 19, "other": [19, 25], "indic": 19, "3d": 19, "graph_of_el": 19, "matrix_scoring_schem": 19, "graph": [19, 20, 21], "arc": 19, "futur": [19, 20, 22], "mention": 19, "latter": 19, "po": 19, "fgc": 19, "pairwise_cost_matrix": 19, "auxiliary_algorithm": 20, "bound_for_exact": 20, "b": [20, 22, 25], "bulteau": [20, 22], "vialett": [20, 22], "2021": [20, 22], "406": [20, 22], "421": [20, 22], "subproblem": 20, "concaten": 20, "solut": 20, "form": 20, "modifi": 20, "run": 20, "anoth": 20, "awar": 20, "auxiliari": 20, "preprocess": 21, "s1": [21, 22], "s2": [21, 22], "s3": [21, 22], "sk": [21, 22], "exist": 21, "sen": 21, "consist": 21, "compute_partit": [21, 22], "obtain": 21, "size_of_biggest_subproblem": 21, "biggest": 21, "respect": [22, 25], "ailon": 23, "charikar": 23, "newman": 23, "inconsist": 23, "cluster": 23, "journal": 23, "acm": 23, "jacm": 23, "55": 23, "2008": 23, "23": 23, "approxim": 23, "perm": 23, "inde": 23, "need": [23, 24], "agre": 23, "miss": 23, "make": 23, "virtual": [23, 25], "disjoint": 24, "can_be_of_int": 24, "convert": [24, 26], "file_path": 24, "from_list": 24, "ranking_list": 24, "from_str": 24, "ranking_str": 24, "generate_rank": 24, "possibli": 24, "modif": 24, "done": 24, "rang": 24, "left": 24, "neighbor": 24, "right": 24, "less": 24, "abov": 24, "uniform_permut": 24, "messag": 25, "0the": 25, "fourth": 25, "fifth": 25, "listth": 25, "equalth": 25, "third": 25, "0for": 25, "6": 25, "real": 25, "rwo": 25, "let": 25, "t": 25, "pai": 25, "correct": 25, "format": 25, "b1": 25, "b2": 25, "b3": 25, "b4": 25, "b5": 25, "b6": 25, "sixth": 25, "b_vector": 25, "correspond": 25, "2022": 25, "give": 25, "get_extended_measure_scoring_schem": 25, "get_induced_measure_scoring_scheme_p": 25, "imit": 25, "unif": 25, "break": 25, "get_nicknam": 25, "nicknam": 25, "get_pseudodistance_scoring_schem": 25, "pseudo": 25, "bryan": 25, "ranc": 25, "bastien": 25, "2014": 25, "conqur": 25, "bio": 25, "queri": 25, "reformul": 25, "319": 25, "08590": 25, "6_13": 25, "get_pseudodistance_scoring_scheme_p": 25, "reap": 25, "get_unifying_scoring_schem": 25, "get_unifying_scoring_scheme_p": 25, "is_equivalent_to": 25, "is_equivalent_to_on_complete_rankings_onli": 25, "penalty_vector": 25, "t1_and_t2": 25, "t3": 25, "t4_and_t5": 25, "xor": 25, "t6": 25, "t_vector": 25, "callabl": 26, "pars": 26, "bob": 26, "martin": 26, "john": 26}, "objects": {"corankco.algorithms": [[0, 0, 0, "-", "algorithmChoice"], [17, 0, 0, "-", "median_ranking"], [19, 0, 0, "-", "pairwisebasedalgorithm"]], "corankco.algorithms.algorithmChoice": [[0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmEnumeration"], [0, 3, 1, "", "get_algorithm"]], "corankco.algorithms.algorithmChoice.Algorithm": [[0, 2, 1, "", "get_all"], [0, 2, 1, "", "get_all_compatible_with_any_scoring_scheme"]], "corankco.algorithms.bioconsert": [[1, 0, 0, "-", "bioco"], [2, 0, 0, "-", "bioconsert"]], "corankco.algorithms.bioconsert.bioco": [[1, 1, 1, "", "BioCo"]], "corankco.algorithms.bioconsert.bioco.BioCo": [[1, 2, 1, "", "get_full_name"]], "corankco.algorithms.bioconsert.bioconsert": [[2, 1, 1, "", "BioConsert"]], "corankco.algorithms.bioconsert.bioconsert.BioConsert": [[2, 2, 1, "", "compute_consensus_rankings"], [2, 2, 1, "", "get_full_name"], [2, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.borda": [[3, 0, 0, "-", "borda"]], "corankco.algorithms.borda.borda": [[3, 1, 1, "", "BordaCount"]], "corankco.algorithms.borda.borda.BordaCount": [[3, 2, 1, "", "compute_consensus_rankings"], [3, 2, 1, "", "get_full_name"], [3, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.copeland": [[5, 0, 0, "-", "copeland"]], "corankco.algorithms.copeland.copeland": [[5, 1, 1, "", "CopelandMethod"]], "corankco.algorithms.copeland.copeland.CopelandMethod": [[5, 2, 1, "", "compute_consensus_rankings"], [5, 2, 1, "", "get_full_name"], [5, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.exact": [[8, 0, 0, "-", "exactalgorithm"], [9, 0, 0, "-", "exactalgorithmbase"], [10, 0, 0, "-", "exactalgorithmcplex"], [11, 0, 0, "-", "exactalgorithmcplexforpaperoptim1"], [12, 0, 0, "-", "exactalgorithmgeneric"]], "corankco.algorithms.exact.exactalgorithm": [[8, 1, 1, "", "ExactAlgorithm"]], "corankco.algorithms.exact.exactalgorithm.ExactAlgorithm": [[8, 2, 1, "", "compute_consensus_rankings"], [8, 2, 1, "", "get_full_name"], [8, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.exact.exactalgorithmbase": [[9, 1, 1, "", "ExactAlgorithmBase"], [9, 4, 1, "", "IncompatibleArgumentsException"]], "corankco.algorithms.exact.exactalgorithmbase.ExactAlgorithmBase": [[9, 2, 1, "", "compute_consensus_rankings"], [9, 2, 1, "", "get_full_name"], [9, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.exact.exactalgorithmcplex": [[10, 1, 1, "", "ExactAlgorithmCplex"]], "corankco.algorithms.exact.exactalgorithmcplex.ExactAlgorithmCplex": [[10, 2, 1, "", "compute_consensus_rankings"], [10, 2, 1, "", "get_full_name"], [10, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1": [[11, 1, 1, "", "ExactAlgorithmCplexForPaperOptim1"]], "corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1.ExactAlgorithmCplexForPaperOptim1": [[11, 2, 1, "", "get_full_name"]], "corankco.algorithms.exact.exactalgorithmgeneric": [[12, 1, 1, "", "ExactAlgorithmGeneric"]], "corankco.algorithms.exact.exactalgorithmgeneric.ExactAlgorithmGeneric": [[12, 2, 1, "", "compute_consensus_rankings"], [12, 2, 1, "", "get_full_name"], [12, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.kwiksort": [[15, 0, 0, "-", "kwiksortabs"], [16, 0, 0, "-", "kwiksortrandom"]], "corankco.algorithms.kwiksort.kwiksortabs": [[15, 1, 1, "", "KwikSortAbs"]], "corankco.algorithms.kwiksort.kwiksortabs.KwikSortAbs": [[15, 2, 1, "", "compute_consensus_rankings"], [15, 2, 1, "", "get_full_name"], [15, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.kwiksort.kwiksortrandom": [[16, 1, 1, "", "KwikSortRandom"]], "corankco.algorithms.kwiksort.kwiksortrandom.KwikSortRandom": [[16, 2, 1, "", "get_full_name"], [16, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.median_ranking": [[17, 1, 1, "", "MedianRanking"], [17, 4, 1, "", "ScoringSchemeNotHandledException"]], "corankco.algorithms.median_ranking.MedianRanking": [[17, 2, 1, "", "bench_time_consensus"], [17, 2, 1, "", "compute_consensus_rankings"], [17, 2, 1, "", "get_full_name"], [17, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.pairwisebasedalgorithm": [[19, 1, 1, "", "PairwiseBasedAlgorithm"]], "corankco.algorithms.pairwisebasedalgorithm.PairwiseBasedAlgorithm": [[19, 2, 1, "", "can_be_all_tied"], [19, 2, 1, "", "graph_of_elements"], [19, 2, 1, "", "pairwise_cost_matrix"]], "corankco.algorithms.parcons": [[20, 0, 0, "-", "parcons"]], "corankco.algorithms.parcons.parcons": [[20, 1, 1, "", "ParCons"]], "corankco.algorithms.parcons.parcons.ParCons": [[20, 2, 1, "", "compute_consensus_rankings"], [20, 2, 1, "", "get_full_name"], [20, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco.algorithms.pickaperm": [[23, 0, 0, "-", "pickaperm"]], "corankco.algorithms.pickaperm.pickaperm": [[23, 4, 1, "", "InompleteRankingsIncompatibleWithScoringSchemeException"], [23, 1, 1, "", "PickAPerm"]], "corankco.algorithms.pickaperm.pickaperm.PickAPerm": [[23, 2, 1, "", "compute_consensus_rankings"], [23, 2, 1, "", "get_full_name"], [23, 2, 1, "", "is_scoring_scheme_relevant_when_incomplete_rankings"]], "corankco": [[4, 0, 0, "-", "consensus"], [6, 0, 0, "-", "dataset"], [7, 0, 0, "-", "element"], [14, 0, 0, "-", "kemeny_score_computation"], [24, 0, 0, "-", "ranking"], [25, 0, 0, "-", "scoringscheme"], [26, 0, 0, "-", "utils"]], "corankco.consensus": [[4, 1, 1, "", "Consensus"], [4, 1, 1, "", "ConsensusFeature"], [4, 1, 1, "", "ConsensusSingleRanking"]], "corankco.consensus.Consensus": [[4, 5, 1, "", "associated_dataset"], [4, 5, 1, "", "associated_scoring_scheme"], [4, 5, 1, "", "consensus_rankings"], [4, 5, 1, "", "copeland_scores"], [4, 5, 1, "", "copeland_victories"], [4, 2, 1, "", "description"], [4, 5, 1, "", "elements"], [4, 2, 1, "", "evaluate_topk_ranking"], [4, 5, 1, "", "features"], [4, 2, 1, "", "from_raw_lists"], [4, 2, 1, "", "get_consensus_from_file"], [4, 5, 1, "", "kemeny_score"], [4, 5, 1, "", "nb_consensus"], [4, 5, 1, "", "nb_elements"], [4, 5, 1, "", "necessarily_optimal"]], "corankco.consensus.ConsensusSingleRanking": [[4, 2, 1, "", "from_raw_lists"], [4, 2, 1, "", "position_element"]], "corankco.dataset": [[6, 1, 1, "", "Dataset"], [6, 1, 1, "", "DatasetSelector"], [6, 4, 1, "", "EmptyDatasetException"]], "corankco.dataset.Dataset": [[6, 2, 1, "", "contains_element"], [6, 2, 1, "", "description"], [6, 2, 1, "", "from_file"], [6, 2, 1, "", "from_raw_list"], [6, 2, 1, "", "get_dataset_from_file"], [6, 2, 1, "", "get_datasets_from_folder"], [6, 2, 1, "", "get_positions"], [6, 2, 1, "", "get_random_dataset_markov"], [6, 2, 1, "", "get_uniform_permutation_dataset"], [6, 5, 1, "", "is_complete"], [6, 5, 1, "", "mapping_elem_id"], [6, 5, 1, "", "mapping_id_elem"], [6, 5, 1, "", "name"], [6, 5, 1, "", "nb_elements"], [6, 5, 1, "", "nb_rankings"], [6, 2, 1, "", "penalties_relative_positions"], [6, 5, 1, "", "rankings"], [6, 2, 1, "", "remove_elements"], [6, 2, 1, "", "remove_elements_rate_presence_lower_than"], [6, 2, 1, "", "remove_empty_rankings"], [6, 2, 1, "", "sub_problem_from_elements"], [6, 2, 1, "", "sub_problem_from_ids"], [6, 2, 1, "", "unified_dataset"], [6, 2, 1, "", "unified_rankings"], [6, 5, 1, "", "universe"], [6, 5, 1, "", "without_ties"], [6, 2, 1, "", "write"]], "corankco.dataset.DatasetSelector": [[6, 5, 1, "", "nb_elem_max"], [6, 5, 1, "", "nb_elem_min"], [6, 5, 1, "", "nb_rankings_max"], [6, 5, 1, "", "nb_rankings_min"], [6, 2, 1, "", "select_datasets"]], "corankco.element": [[7, 1, 1, "", "Element"], [7, 1, 1, "", "PairwiseElementComparison"]], "corankco.element.Element": [[7, 5, 1, "", "type"], [7, 5, 1, "", "value"]], "corankco.element.PairwiseElementComparison": [[7, 5, 1, "", "x"], [7, 5, 1, "", "x_after_y"], [7, 5, 1, "", "x_before_y"], [7, 5, 1, "", "x_tied_y"], [7, 5, 1, "", "y"]], "corankco.kemeny_score_computation": [[14, 4, 1, "", "InvalidRankingsForComputingDistance"], [14, 1, 1, "", "KemenyComputingFactory"]], "corankco.kemeny_score_computation.KemenyComputingFactory": [[14, 2, 1, "", "get_kemeny_score"], [14, 5, 1, "", "scoring_scheme"]], "corankco.partitioning": [[18, 0, 0, "-", "orderedPartition"], [21, 0, 0, "-", "parconsPartition"], [22, 0, 0, "-", "parfront"]], "corankco.partitioning.orderedPartition": [[18, 1, 1, "", "OrderedPartition"]], "corankco.partitioning.orderedPartition.OrderedPartition": [[18, 2, 1, "", "consistent_with"], [18, 5, 1, "", "elements"], [18, 2, 1, "", "get_group_index"], [18, 2, 1, "", "in_same_group"], [18, 5, 1, "", "nb_elements"], [18, 5, 1, "", "partition"], [18, 2, 1, "", "which_index_is"]], "corankco.partitioning.parconsPartition": [[21, 1, 1, "", "ParConsPartition"]], "corankco.partitioning.parconsPartition.ParConsPartition": [[21, 2, 1, "", "compute_partition"], [21, 2, 1, "", "size_of_biggest_subproblem"]], "corankco.partitioning.parfront": [[22, 1, 1, "", "ParFront"]], "corankco.partitioning.parfront.ParFront": [[22, 2, 1, "", "compute_partition"]], "corankco.ranking": [[24, 1, 1, "", "Ranking"]], "corankco.ranking.Ranking": [[24, 5, 1, "", "buckets"], [24, 2, 1, "", "can_be_of_int"], [24, 5, 1, "", "domain"], [24, 2, 1, "", "from_file"], [24, 2, 1, "", "from_list"], [24, 2, 1, "", "from_string"], [24, 2, 1, "", "generate_rankings"], [24, 5, 1, "", "nb_elements"], [24, 5, 1, "", "positions"], [24, 2, 1, "", "uniform_permutations"]], "corankco.scoringscheme": [[25, 4, 1, "", "ForbiddenAssociationPenaltiesScoringScheme"], [25, 4, 1, "", "InvalidScoringScheme"], [25, 4, 1, "", "NonRealPositiveValuesScoringScheme"], [25, 1, 1, "", "ScoringScheme"]], "corankco.scoringscheme.ScoringScheme": [[25, 5, 1, "", "b1"], [25, 5, 1, "", "b2"], [25, 5, 1, "", "b3"], [25, 5, 1, "", "b4"], [25, 5, 1, "", "b5"], [25, 5, 1, "", "b6"], [25, 5, 1, "", "b_vector"], [25, 2, 1, "", "description"], [25, 2, 1, "", "get_extended_measure_scoring_scheme"], [25, 2, 1, "", "get_induced_measure_scoring_scheme_p"], [25, 2, 1, "", "get_nickname"], [25, 2, 1, "", "get_pseudodistance_scoring_scheme"], [25, 2, 1, "", "get_pseudodistance_scoring_scheme_p"], [25, 2, 1, "", "get_unifying_scoring_scheme"], [25, 2, 1, "", "get_unifying_scoring_scheme_p"], [25, 2, 1, "", "is_equivalent_to"], [25, 2, 1, "", "is_equivalent_to_on_complete_rankings_only"], [25, 5, 1, "", "penalty_vectors"], [25, 5, 1, "", "t1_and_t2"], [25, 5, 1, "", "t3"], [25, 5, 1, "", "t4_and_t5"], [25, 5, 1, "", "t6"], [25, 5, 1, "", "t_vector"]], "corankco.utils": [[26, 3, 1, "", "parse_ranking_with_ties"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"], "5": ["py", "property", "Python property"]}, "titleterms": {"algorithmchoic": 0, "bioco": 1, "bioconsert": 2, "borda": 3, "consensu": 4, "copeland": 5, "dataset": 6, "element": 7, "exactalgorithm": 8, "exactalgorithmbas": 9, "exactalgorithmcplex": 10, "exactalgorithmcplexforpaperoptim1": 11, "exactalgorithmgener": 12, "welcom": 13, "corankco": 13, "": 13, "document": 13, "content": 13, "indic": 13, "tabl": 13, "kemeny_score_comput": 14, "kwiksortab": 15, "kwiksortrandom": 16, "median_rank": 17, "orderedpartit": 18, "pairwisebasedalgorithm": 19, "parcon": 20, "parconspartit": 21, "parfront": 22, "pickaperm": 23, "rank": 24, "scoringschem": 25, "util": 26}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"algorithmChoice": [[0, "module-corankco.algorithms.algorithmChoice"]], "bioco": [[1, "module-corankco.algorithms.bioconsert.bioco"]], "bioconsert": [[2, "module-corankco.algorithms.bioconsert.bioconsert"]], "borda": [[3, "module-corankco.algorithms.borda.borda"]], "consensus": [[4, "module-corankco.consensus"]], "copeland": [[5, "module-corankco.algorithms.copeland.copeland"]], "dataset": [[6, "module-corankco.dataset"]], "element": [[7, "module-corankco.element"]], "exactalgorithm": [[8, "module-corankco.algorithms.exact.exactalgorithm"]], "exactalgorithmbase": [[9, "module-corankco.algorithms.exact.exactalgorithmbase"]], "exactalgorithmcplex": [[10, "module-corankco.algorithms.exact.exactalgorithmcplex"]], "exactalgorithmcplexforpaperoptim1": [[11, "module-corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1"]], "exactalgorithmgeneric": [[12, "module-corankco.algorithms.exact.exactalgorithmgeneric"]], "Welcome to CoRankCo\u2019s documentation!": [[13, "welcome-to-corankco-s-documentation"]], "Contents:": [[13, null]], "Indices and tables": [[13, "indices-and-tables"]], "kemeny_score_computation": [[14, "module-corankco.kemeny_score_computation"]], "kwiksortabs": [[15, "module-corankco.algorithms.kwiksort.kwiksortabs"]], "kwiksortrandom": [[16, "module-corankco.algorithms.kwiksort.kwiksortrandom"]], "median_ranking": [[17, "module-corankco.algorithms.median_ranking"]], "orderedPartition": [[18, "module-corankco.partitioning.orderedPartition"]], "pairwisebasedalgorithm": [[19, "module-corankco.algorithms.pairwisebasedalgorithm"]], "parcons": [[20, "module-corankco.algorithms.parcons.parcons"]], "parconsPartition": [[21, "module-corankco.partitioning.parconsPartition"]], "parfront": [[22, "module-corankco.partitioning.parfront"]], "pickaperm": [[23, "module-corankco.algorithms.pickaperm.pickaperm"]], "ranking": [[24, "module-corankco.ranking"]], "scoringscheme": [[25, "module-corankco.scoringscheme"]], "utils": [[26, "module-corankco.utils"]]}, "indexentries": {"algorithm (class in corankco.algorithms.algorithmchoice)": [[0, "corankco.algorithms.algorithmChoice.Algorithm"]], "algorithmenumeration (class in corankco.algorithms.algorithmchoice)": [[0, "corankco.algorithms.algorithmChoice.AlgorithmEnumeration"]], "corankco.algorithms.algorithmchoice": [[0, "module-corankco.algorithms.algorithmChoice"]], "get_algorithm() (in module corankco.algorithms.algorithmchoice)": [[0, "corankco.algorithms.algorithmChoice.get_algorithm"]], "get_all() (corankco.algorithms.algorithmchoice.algorithm static method)": [[0, "corankco.algorithms.algorithmChoice.Algorithm.get_all"]], "get_all_compatible_with_any_scoring_scheme() (corankco.algorithms.algorithmchoice.algorithm static method)": [[0, "corankco.algorithms.algorithmChoice.Algorithm.get_all_compatible_with_any_scoring_scheme"]], "module": [[0, "module-corankco.algorithms.algorithmChoice"], [1, "module-corankco.algorithms.bioconsert.bioco"], [2, "module-corankco.algorithms.bioconsert.bioconsert"], [3, "module-corankco.algorithms.borda.borda"], [4, "module-corankco.consensus"], [5, "module-corankco.algorithms.copeland.copeland"], [6, "module-corankco.dataset"], [7, "module-corankco.element"], [8, "module-corankco.algorithms.exact.exactalgorithm"], [9, "module-corankco.algorithms.exact.exactalgorithmbase"], [10, "module-corankco.algorithms.exact.exactalgorithmcplex"], [11, "module-corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1"], [12, "module-corankco.algorithms.exact.exactalgorithmgeneric"], [14, "module-corankco.kemeny_score_computation"], [15, "module-corankco.algorithms.kwiksort.kwiksortabs"], [16, "module-corankco.algorithms.kwiksort.kwiksortrandom"], [17, "module-corankco.algorithms.median_ranking"], [18, "module-corankco.partitioning.orderedPartition"], [19, "module-corankco.algorithms.pairwisebasedalgorithm"], [20, "module-corankco.algorithms.parcons.parcons"], [21, "module-corankco.partitioning.parconsPartition"], [22, "module-corankco.partitioning.parfront"], [23, "module-corankco.algorithms.pickaperm.pickaperm"], [24, "module-corankco.ranking"], [25, "module-corankco.scoringscheme"], [26, "module-corankco.utils"]], "bioco (class in corankco.algorithms.bioconsert.bioco)": [[1, "corankco.algorithms.bioconsert.bioco.BioCo"]], "corankco.algorithms.bioconsert.bioco": [[1, "module-corankco.algorithms.bioconsert.bioco"]], "get_full_name() (corankco.algorithms.bioconsert.bioco.bioco method)": [[1, "corankco.algorithms.bioconsert.bioco.BioCo.get_full_name"]], "bioconsert (class in corankco.algorithms.bioconsert.bioconsert)": [[2, "corankco.algorithms.bioconsert.bioconsert.BioConsert"]], "compute_consensus_rankings() (corankco.algorithms.bioconsert.bioconsert.bioconsert method)": [[2, "corankco.algorithms.bioconsert.bioconsert.BioConsert.compute_consensus_rankings"]], "corankco.algorithms.bioconsert.bioconsert": [[2, "module-corankco.algorithms.bioconsert.bioconsert"]], "get_full_name() (corankco.algorithms.bioconsert.bioconsert.bioconsert method)": [[2, "corankco.algorithms.bioconsert.bioconsert.BioConsert.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.bioconsert.bioconsert.bioconsert method)": [[2, "corankco.algorithms.bioconsert.bioconsert.BioConsert.is_scoring_scheme_relevant_when_incomplete_rankings"]], "bordacount (class in corankco.algorithms.borda.borda)": [[3, "corankco.algorithms.borda.borda.BordaCount"]], "compute_consensus_rankings() (corankco.algorithms.borda.borda.bordacount method)": [[3, "corankco.algorithms.borda.borda.BordaCount.compute_consensus_rankings"]], "corankco.algorithms.borda.borda": [[3, "module-corankco.algorithms.borda.borda"]], "get_full_name() (corankco.algorithms.borda.borda.bordacount method)": [[3, "corankco.algorithms.borda.borda.BordaCount.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.borda.borda.bordacount method)": [[3, "corankco.algorithms.borda.borda.BordaCount.is_scoring_scheme_relevant_when_incomplete_rankings"]], "consensus (class in corankco.consensus)": [[4, "corankco.consensus.Consensus"]], "consensusfeature (class in corankco.consensus)": [[4, "corankco.consensus.ConsensusFeature"]], "consensussingleranking (class in corankco.consensus)": [[4, "corankco.consensus.ConsensusSingleRanking"]], "associated_dataset (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.associated_dataset"]], "associated_scoring_scheme (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.associated_scoring_scheme"]], "consensus_rankings (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.consensus_rankings"]], "copeland_scores (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.copeland_scores"]], "copeland_victories (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.copeland_victories"]], "corankco.consensus": [[4, "module-corankco.consensus"]], "description() (corankco.consensus.consensus method)": [[4, "corankco.consensus.Consensus.description"]], "elements (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.elements"]], "evaluate_topk_ranking() (corankco.consensus.consensus method)": [[4, "corankco.consensus.Consensus.evaluate_topk_ranking"]], "features (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.features"]], "from_raw_lists() (corankco.consensus.consensus class method)": [[4, "corankco.consensus.Consensus.from_raw_lists"]], "from_raw_lists() (corankco.consensus.consensussingleranking class method)": [[4, "corankco.consensus.ConsensusSingleRanking.from_raw_lists"]], "get_consensus_from_file() (corankco.consensus.consensus class method)": [[4, "corankco.consensus.Consensus.get_consensus_from_file"]], "kemeny_score (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.kemeny_score"]], "nb_consensus (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.nb_consensus"]], "nb_elements (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.nb_elements"]], "necessarily_optimal (corankco.consensus.consensus property)": [[4, "corankco.consensus.Consensus.necessarily_optimal"]], "position_element() (corankco.consensus.consensussingleranking method)": [[4, "corankco.consensus.ConsensusSingleRanking.position_element"]], "copelandmethod (class in corankco.algorithms.copeland.copeland)": [[5, "corankco.algorithms.copeland.copeland.CopelandMethod"]], "compute_consensus_rankings() (corankco.algorithms.copeland.copeland.copelandmethod method)": [[5, "corankco.algorithms.copeland.copeland.CopelandMethod.compute_consensus_rankings"]], "corankco.algorithms.copeland.copeland": [[5, "module-corankco.algorithms.copeland.copeland"]], "get_full_name() (corankco.algorithms.copeland.copeland.copelandmethod method)": [[5, "corankco.algorithms.copeland.copeland.CopelandMethod.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.copeland.copeland.copelandmethod method)": [[5, "corankco.algorithms.copeland.copeland.CopelandMethod.is_scoring_scheme_relevant_when_incomplete_rankings"]], "dataset (class in corankco.dataset)": [[6, "corankco.dataset.Dataset"]], "datasetselector (class in corankco.dataset)": [[6, "corankco.dataset.DatasetSelector"]], "emptydatasetexception": [[6, "corankco.dataset.EmptyDatasetException"]], "contains_element() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.contains_element"]], "corankco.dataset": [[6, "module-corankco.dataset"]], "description() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.description"]], "from_file() (corankco.dataset.dataset class method)": [[6, "corankco.dataset.Dataset.from_file"]], "from_raw_list() (corankco.dataset.dataset class method)": [[6, "corankco.dataset.Dataset.from_raw_list"]], "get_dataset_from_file() (corankco.dataset.dataset static method)": [[6, "corankco.dataset.Dataset.get_dataset_from_file"]], "get_datasets_from_folder() (corankco.dataset.dataset static method)": [[6, "corankco.dataset.Dataset.get_datasets_from_folder"]], "get_positions() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.get_positions"]], "get_random_dataset_markov() (corankco.dataset.dataset static method)": [[6, "corankco.dataset.Dataset.get_random_dataset_markov"]], "get_uniform_permutation_dataset() (corankco.dataset.dataset static method)": [[6, "corankco.dataset.Dataset.get_uniform_permutation_dataset"]], "is_complete (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.is_complete"]], "mapping_elem_id (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.mapping_elem_id"]], "mapping_id_elem (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.mapping_id_elem"]], "name (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.name"]], "nb_elem_max (corankco.dataset.datasetselector property)": [[6, "corankco.dataset.DatasetSelector.nb_elem_max"]], "nb_elem_min (corankco.dataset.datasetselector property)": [[6, "corankco.dataset.DatasetSelector.nb_elem_min"]], "nb_elements (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.nb_elements"]], "nb_rankings (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.nb_rankings"]], "nb_rankings_max (corankco.dataset.datasetselector property)": [[6, "corankco.dataset.DatasetSelector.nb_rankings_max"]], "nb_rankings_min (corankco.dataset.datasetselector property)": [[6, "corankco.dataset.DatasetSelector.nb_rankings_min"]], "penalties_relative_positions() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.penalties_relative_positions"]], "rankings (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.rankings"]], "remove_elements() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.remove_elements"]], "remove_elements_rate_presence_lower_than() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.remove_elements_rate_presence_lower_than"]], "remove_empty_rankings() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.remove_empty_rankings"]], "select_datasets() (corankco.dataset.datasetselector method)": [[6, "corankco.dataset.DatasetSelector.select_datasets"]], "sub_problem_from_elements() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.sub_problem_from_elements"]], "sub_problem_from_ids() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.sub_problem_from_ids"]], "unified_dataset() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.unified_dataset"]], "unified_rankings() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.unified_rankings"]], "universe (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.universe"]], "without_ties (corankco.dataset.dataset property)": [[6, "corankco.dataset.Dataset.without_ties"]], "write() (corankco.dataset.dataset method)": [[6, "corankco.dataset.Dataset.write"]], "element (class in corankco.element)": [[7, "corankco.element.Element"]], "pairwiseelementcomparison (class in corankco.element)": [[7, "corankco.element.PairwiseElementComparison"]], "corankco.element": [[7, "module-corankco.element"]], "type (corankco.element.element property)": [[7, "corankco.element.Element.type"]], "value (corankco.element.element property)": [[7, "corankco.element.Element.value"]], "x (corankco.element.pairwiseelementcomparison property)": [[7, "corankco.element.PairwiseElementComparison.x"]], "x_after_y (corankco.element.pairwiseelementcomparison property)": [[7, "corankco.element.PairwiseElementComparison.x_after_y"]], "x_before_y (corankco.element.pairwiseelementcomparison property)": [[7, "corankco.element.PairwiseElementComparison.x_before_y"]], "x_tied_y (corankco.element.pairwiseelementcomparison property)": [[7, "corankco.element.PairwiseElementComparison.x_tied_y"]], "y (corankco.element.pairwiseelementcomparison property)": [[7, "corankco.element.PairwiseElementComparison.y"]], "exactalgorithm (class in corankco.algorithms.exact.exactalgorithm)": [[8, "corankco.algorithms.exact.exactalgorithm.ExactAlgorithm"]], "compute_consensus_rankings() (corankco.algorithms.exact.exactalgorithm.exactalgorithm method)": [[8, "corankco.algorithms.exact.exactalgorithm.ExactAlgorithm.compute_consensus_rankings"]], "corankco.algorithms.exact.exactalgorithm": [[8, "module-corankco.algorithms.exact.exactalgorithm"]], "get_full_name() (corankco.algorithms.exact.exactalgorithm.exactalgorithm method)": [[8, "corankco.algorithms.exact.exactalgorithm.ExactAlgorithm.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.exact.exactalgorithm.exactalgorithm method)": [[8, "corankco.algorithms.exact.exactalgorithm.ExactAlgorithm.is_scoring_scheme_relevant_when_incomplete_rankings"]], "exactalgorithmbase (class in corankco.algorithms.exact.exactalgorithmbase)": [[9, "corankco.algorithms.exact.exactalgorithmbase.ExactAlgorithmBase"]], "incompatibleargumentsexception": [[9, "corankco.algorithms.exact.exactalgorithmbase.IncompatibleArgumentsException"]], "compute_consensus_rankings() (corankco.algorithms.exact.exactalgorithmbase.exactalgorithmbase method)": [[9, "corankco.algorithms.exact.exactalgorithmbase.ExactAlgorithmBase.compute_consensus_rankings"]], "corankco.algorithms.exact.exactalgorithmbase": [[9, "module-corankco.algorithms.exact.exactalgorithmbase"]], "get_full_name() (corankco.algorithms.exact.exactalgorithmbase.exactalgorithmbase method)": [[9, "corankco.algorithms.exact.exactalgorithmbase.ExactAlgorithmBase.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.exact.exactalgorithmbase.exactalgorithmbase method)": [[9, "corankco.algorithms.exact.exactalgorithmbase.ExactAlgorithmBase.is_scoring_scheme_relevant_when_incomplete_rankings"]], "exactalgorithmcplex (class in corankco.algorithms.exact.exactalgorithmcplex)": [[10, "corankco.algorithms.exact.exactalgorithmcplex.ExactAlgorithmCplex"]], "compute_consensus_rankings() (corankco.algorithms.exact.exactalgorithmcplex.exactalgorithmcplex method)": [[10, "corankco.algorithms.exact.exactalgorithmcplex.ExactAlgorithmCplex.compute_consensus_rankings"]], "corankco.algorithms.exact.exactalgorithmcplex": [[10, "module-corankco.algorithms.exact.exactalgorithmcplex"]], "get_full_name() (corankco.algorithms.exact.exactalgorithmcplex.exactalgorithmcplex method)": [[10, "corankco.algorithms.exact.exactalgorithmcplex.ExactAlgorithmCplex.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.exact.exactalgorithmcplex.exactalgorithmcplex method)": [[10, "corankco.algorithms.exact.exactalgorithmcplex.ExactAlgorithmCplex.is_scoring_scheme_relevant_when_incomplete_rankings"]], "exactalgorithmcplexforpaperoptim1 (class in corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1)": [[11, "corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1.ExactAlgorithmCplexForPaperOptim1"]], "corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1": [[11, "module-corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1"]], "get_full_name() (corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1.exactalgorithmcplexforpaperoptim1 method)": [[11, "corankco.algorithms.exact.exactalgorithmcplexforpaperoptim1.ExactAlgorithmCplexForPaperOptim1.get_full_name"]], "exactalgorithmgeneric (class in corankco.algorithms.exact.exactalgorithmgeneric)": [[12, "corankco.algorithms.exact.exactalgorithmgeneric.ExactAlgorithmGeneric"]], "compute_consensus_rankings() (corankco.algorithms.exact.exactalgorithmgeneric.exactalgorithmgeneric method)": [[12, "corankco.algorithms.exact.exactalgorithmgeneric.ExactAlgorithmGeneric.compute_consensus_rankings"]], "corankco.algorithms.exact.exactalgorithmgeneric": [[12, "module-corankco.algorithms.exact.exactalgorithmgeneric"]], "get_full_name() (corankco.algorithms.exact.exactalgorithmgeneric.exactalgorithmgeneric method)": [[12, "corankco.algorithms.exact.exactalgorithmgeneric.ExactAlgorithmGeneric.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.exact.exactalgorithmgeneric.exactalgorithmgeneric method)": [[12, "corankco.algorithms.exact.exactalgorithmgeneric.ExactAlgorithmGeneric.is_scoring_scheme_relevant_when_incomplete_rankings"]], "invalidrankingsforcomputingdistance": [[14, "corankco.kemeny_score_computation.InvalidRankingsForComputingDistance"]], "kemenycomputingfactory (class in corankco.kemeny_score_computation)": [[14, "corankco.kemeny_score_computation.KemenyComputingFactory"]], "corankco.kemeny_score_computation": [[14, "module-corankco.kemeny_score_computation"]], "get_kemeny_score() (corankco.kemeny_score_computation.kemenycomputingfactory method)": [[14, "corankco.kemeny_score_computation.KemenyComputingFactory.get_kemeny_score"]], "scoring_scheme (corankco.kemeny_score_computation.kemenycomputingfactory property)": [[14, "corankco.kemeny_score_computation.KemenyComputingFactory.scoring_scheme"]], "kwiksortabs (class in corankco.algorithms.kwiksort.kwiksortabs)": [[15, "corankco.algorithms.kwiksort.kwiksortabs.KwikSortAbs"]], "compute_consensus_rankings() (corankco.algorithms.kwiksort.kwiksortabs.kwiksortabs method)": [[15, "corankco.algorithms.kwiksort.kwiksortabs.KwikSortAbs.compute_consensus_rankings"]], "corankco.algorithms.kwiksort.kwiksortabs": [[15, "module-corankco.algorithms.kwiksort.kwiksortabs"]], "get_full_name() (corankco.algorithms.kwiksort.kwiksortabs.kwiksortabs method)": [[15, "corankco.algorithms.kwiksort.kwiksortabs.KwikSortAbs.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.kwiksort.kwiksortabs.kwiksortabs method)": [[15, "corankco.algorithms.kwiksort.kwiksortabs.KwikSortAbs.is_scoring_scheme_relevant_when_incomplete_rankings"]], "kwiksortrandom (class in corankco.algorithms.kwiksort.kwiksortrandom)": [[16, "corankco.algorithms.kwiksort.kwiksortrandom.KwikSortRandom"]], "corankco.algorithms.kwiksort.kwiksortrandom": [[16, "module-corankco.algorithms.kwiksort.kwiksortrandom"]], "get_full_name() (corankco.algorithms.kwiksort.kwiksortrandom.kwiksortrandom method)": [[16, "corankco.algorithms.kwiksort.kwiksortrandom.KwikSortRandom.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.kwiksort.kwiksortrandom.kwiksortrandom method)": [[16, "corankco.algorithms.kwiksort.kwiksortrandom.KwikSortRandom.is_scoring_scheme_relevant_when_incomplete_rankings"]], "medianranking (class in corankco.algorithms.median_ranking)": [[17, "corankco.algorithms.median_ranking.MedianRanking"]], "scoringschemenothandledexception": [[17, "corankco.algorithms.median_ranking.ScoringSchemeNotHandledException"]], "bench_time_consensus() (corankco.algorithms.median_ranking.medianranking method)": [[17, "corankco.algorithms.median_ranking.MedianRanking.bench_time_consensus"]], "compute_consensus_rankings() (corankco.algorithms.median_ranking.medianranking method)": [[17, "corankco.algorithms.median_ranking.MedianRanking.compute_consensus_rankings"]], "corankco.algorithms.median_ranking": [[17, "module-corankco.algorithms.median_ranking"]], "get_full_name() (corankco.algorithms.median_ranking.medianranking method)": [[17, "corankco.algorithms.median_ranking.MedianRanking.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.median_ranking.medianranking method)": [[17, "corankco.algorithms.median_ranking.MedianRanking.is_scoring_scheme_relevant_when_incomplete_rankings"]], "orderedpartition (class in corankco.partitioning.orderedpartition)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition"]], "consistent_with() (corankco.partitioning.orderedpartition.orderedpartition method)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.consistent_with"]], "corankco.partitioning.orderedpartition": [[18, "module-corankco.partitioning.orderedPartition"]], "elements (corankco.partitioning.orderedpartition.orderedpartition property)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.elements"]], "get_group_index() (corankco.partitioning.orderedpartition.orderedpartition method)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.get_group_index"]], "in_same_group() (corankco.partitioning.orderedpartition.orderedpartition method)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.in_same_group"]], "nb_elements (corankco.partitioning.orderedpartition.orderedpartition property)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.nb_elements"]], "partition (corankco.partitioning.orderedpartition.orderedpartition property)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.partition"]], "which_index_is() (corankco.partitioning.orderedpartition.orderedpartition method)": [[18, "corankco.partitioning.orderedPartition.OrderedPartition.which_index_is"]], "pairwisebasedalgorithm (class in corankco.algorithms.pairwisebasedalgorithm)": [[19, "corankco.algorithms.pairwisebasedalgorithm.PairwiseBasedAlgorithm"]], "can_be_all_tied() (corankco.algorithms.pairwisebasedalgorithm.pairwisebasedalgorithm static method)": [[19, "corankco.algorithms.pairwisebasedalgorithm.PairwiseBasedAlgorithm.can_be_all_tied"]], "corankco.algorithms.pairwisebasedalgorithm": [[19, "module-corankco.algorithms.pairwisebasedalgorithm"]], "graph_of_elements() (corankco.algorithms.pairwisebasedalgorithm.pairwisebasedalgorithm static method)": [[19, "corankco.algorithms.pairwisebasedalgorithm.PairwiseBasedAlgorithm.graph_of_elements"]], "pairwise_cost_matrix() (corankco.algorithms.pairwisebasedalgorithm.pairwisebasedalgorithm static method)": [[19, "corankco.algorithms.pairwisebasedalgorithm.PairwiseBasedAlgorithm.pairwise_cost_matrix"]], "parcons (class in corankco.algorithms.parcons.parcons)": [[20, "corankco.algorithms.parcons.parcons.ParCons"]], "compute_consensus_rankings() (corankco.algorithms.parcons.parcons.parcons method)": [[20, "corankco.algorithms.parcons.parcons.ParCons.compute_consensus_rankings"]], "corankco.algorithms.parcons.parcons": [[20, "module-corankco.algorithms.parcons.parcons"]], "get_full_name() (corankco.algorithms.parcons.parcons.parcons method)": [[20, "corankco.algorithms.parcons.parcons.ParCons.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.parcons.parcons.parcons method)": [[20, "corankco.algorithms.parcons.parcons.ParCons.is_scoring_scheme_relevant_when_incomplete_rankings"]], "parconspartition (class in corankco.partitioning.parconspartition)": [[21, "corankco.partitioning.parconsPartition.ParConsPartition"]], "compute_partition() (corankco.partitioning.parconspartition.parconspartition static method)": [[21, "corankco.partitioning.parconsPartition.ParConsPartition.compute_partition"]], "corankco.partitioning.parconspartition": [[21, "module-corankco.partitioning.parconsPartition"]], "size_of_biggest_subproblem() (corankco.partitioning.parconspartition.parconspartition static method)": [[21, "corankco.partitioning.parconsPartition.ParConsPartition.size_of_biggest_subproblem"]], "parfront (class in corankco.partitioning.parfront)": [[22, "corankco.partitioning.parfront.ParFront"]], "compute_partition() (corankco.partitioning.parfront.parfront static method)": [[22, "corankco.partitioning.parfront.ParFront.compute_partition"]], "corankco.partitioning.parfront": [[22, "module-corankco.partitioning.parfront"]], "inompleterankingsincompatiblewithscoringschemeexception": [[23, "corankco.algorithms.pickaperm.pickaperm.InompleteRankingsIncompatibleWithScoringSchemeException"]], "pickaperm (class in corankco.algorithms.pickaperm.pickaperm)": [[23, "corankco.algorithms.pickaperm.pickaperm.PickAPerm"]], "compute_consensus_rankings() (corankco.algorithms.pickaperm.pickaperm.pickaperm method)": [[23, "corankco.algorithms.pickaperm.pickaperm.PickAPerm.compute_consensus_rankings"]], "corankco.algorithms.pickaperm.pickaperm": [[23, "module-corankco.algorithms.pickaperm.pickaperm"]], "get_full_name() (corankco.algorithms.pickaperm.pickaperm.pickaperm method)": [[23, "corankco.algorithms.pickaperm.pickaperm.PickAPerm.get_full_name"]], "is_scoring_scheme_relevant_when_incomplete_rankings() (corankco.algorithms.pickaperm.pickaperm.pickaperm method)": [[23, "corankco.algorithms.pickaperm.pickaperm.PickAPerm.is_scoring_scheme_relevant_when_incomplete_rankings"]], "ranking (class in corankco.ranking)": [[24, "corankco.ranking.Ranking"]], "buckets (corankco.ranking.ranking property)": [[24, "corankco.ranking.Ranking.buckets"]], "can_be_of_int() (corankco.ranking.ranking method)": [[24, "corankco.ranking.Ranking.can_be_of_int"]], "corankco.ranking": [[24, "module-corankco.ranking"]], "domain (corankco.ranking.ranking property)": [[24, "corankco.ranking.Ranking.domain"]], "from_file() (corankco.ranking.ranking class method)": [[24, "corankco.ranking.Ranking.from_file"]], "from_list() (corankco.ranking.ranking class method)": [[24, "corankco.ranking.Ranking.from_list"]], "from_string() (corankco.ranking.ranking class method)": [[24, "corankco.ranking.Ranking.from_string"]], "generate_rankings() (corankco.ranking.ranking static method)": [[24, "corankco.ranking.Ranking.generate_rankings"]], "nb_elements (corankco.ranking.ranking property)": [[24, "corankco.ranking.Ranking.nb_elements"]], "positions (corankco.ranking.ranking property)": [[24, "corankco.ranking.Ranking.positions"]], "uniform_permutations() (corankco.ranking.ranking static method)": [[24, "corankco.ranking.Ranking.uniform_permutations"]], "forbiddenassociationpenaltiesscoringscheme": [[25, "corankco.scoringscheme.ForbiddenAssociationPenaltiesScoringScheme"]], "invalidscoringscheme": [[25, "corankco.scoringscheme.InvalidScoringScheme"]], "nonrealpositivevaluesscoringscheme": [[25, "corankco.scoringscheme.NonRealPositiveValuesScoringScheme"]], "scoringscheme (class in corankco.scoringscheme)": [[25, "corankco.scoringscheme.ScoringScheme"]], "b1 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b1"]], "b2 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b2"]], "b3 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b3"]], "b4 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b4"]], "b5 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b5"]], "b6 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b6"]], "b_vector (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.b_vector"]], "corankco.scoringscheme": [[25, "module-corankco.scoringscheme"]], "description() (corankco.scoringscheme.scoringscheme method)": [[25, "corankco.scoringscheme.ScoringScheme.description"]], "get_extended_measure_scoring_scheme() (corankco.scoringscheme.scoringscheme static method)": [[25, "corankco.scoringscheme.ScoringScheme.get_extended_measure_scoring_scheme"]], "get_induced_measure_scoring_scheme_p() (corankco.scoringscheme.scoringscheme static method)": [[25, "corankco.scoringscheme.ScoringScheme.get_induced_measure_scoring_scheme_p"]], "get_nickname() (corankco.scoringscheme.scoringscheme method)": [[25, "corankco.scoringscheme.ScoringScheme.get_nickname"]], "get_pseudodistance_scoring_scheme() (corankco.scoringscheme.scoringscheme static method)": [[25, "corankco.scoringscheme.ScoringScheme.get_pseudodistance_scoring_scheme"]], "get_pseudodistance_scoring_scheme_p() (corankco.scoringscheme.scoringscheme static method)": [[25, "corankco.scoringscheme.ScoringScheme.get_pseudodistance_scoring_scheme_p"]], "get_unifying_scoring_scheme() (corankco.scoringscheme.scoringscheme static method)": [[25, "corankco.scoringscheme.ScoringScheme.get_unifying_scoring_scheme"]], "get_unifying_scoring_scheme_p() (corankco.scoringscheme.scoringscheme static method)": [[25, "corankco.scoringscheme.ScoringScheme.get_unifying_scoring_scheme_p"]], "is_equivalent_to() (corankco.scoringscheme.scoringscheme method)": [[25, "corankco.scoringscheme.ScoringScheme.is_equivalent_to"]], "is_equivalent_to_on_complete_rankings_only() (corankco.scoringscheme.scoringscheme method)": [[25, "corankco.scoringscheme.ScoringScheme.is_equivalent_to_on_complete_rankings_only"]], "penalty_vectors (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.penalty_vectors"]], "t1_and_t2 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.t1_and_t2"]], "t3 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.t3"]], "t4_and_t5 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.t4_and_t5"]], "t6 (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.t6"]], "t_vector (corankco.scoringscheme.scoringscheme property)": [[25, "corankco.scoringscheme.ScoringScheme.t_vector"]], "corankco.utils": [[26, "module-corankco.utils"]], "parse_ranking_with_ties() (in module corankco.utils)": [[26, "corankco.utils.parse_ranking_with_ties"]]}})